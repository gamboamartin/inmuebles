<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\inmuebles\controllers;

use base\controller\init;
use gamboamartin\comercial\models\com_cliente;
use gamboamartin\errores\errores;
use gamboamartin\inmuebles\html\inm_comprador_html;
use gamboamartin\inmuebles\html\inm_ubicacion_html;
use gamboamartin\inmuebles\models\inm_co_acreditado;
use gamboamartin\inmuebles\models\inm_comprador;
use gamboamartin\inmuebles\models\inm_conf_empresa;
use gamboamartin\inmuebles\models\inm_referencia;
use gamboamartin\inmuebles\models\inm_rel_co_acred;
use gamboamartin\inmuebles\models\inm_rel_comprador_com_cliente;
use gamboamartin\inmuebles\models\inm_rel_ubi_comp;
use gamboamartin\system\_ctl_base;
use gamboamartin\system\links_menu;
use gamboamartin\template\html;
use PDO;
use stdClass;

class controlador_inm_comprador extends _ctl_base {

    public array $imp_ubicaciones = array();
    public function __construct(PDO      $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass())
    {
        $modelo = new inm_comprador(link: $link);
        $html_ = new inm_comprador_html(html: $html);
        $obj_link = new links_menu(link: $link, registro_id:  $this->registro_id);

        $datatables = $this->init_datatable();
        if(errores::$error){
            $error = $this->errores->error(mensaje: 'Error al inicializar datatable',data: $datatables);
            print_r($error);
            die('Error');
        }

        parent::__construct(html:$html_, link: $link,modelo:  $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);
    }

    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta = $this->init_alta();
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al inicializar alta',data:  $r_alta, header: $header,ws:  $ws);
        }


        $keys_selects = array();

        $keys_selects = $this->ks_infonavit(keys_selects: $keys_selects, row_upd: new stdClass());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = $this->ks_dp(keys_selects: $keys_selects, row_upd: new stdClass());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = $this->ks_fiscales(keys_selects: $keys_selects, row_upd: new stdClass());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }


        $columns_ds = array('com_tipo_cliente_descripcion');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'com_tipo_cliente_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Tipo de Cliente', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $columns_ds = array('inm_estado_civil_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'inm_estado_civil_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Estado Civil',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $this->row_upd->descuento_pension_alimenticia_dh = 0;
        $this->row_upd->monto_credito_solicitado_dh = 0;
        $this->row_upd->descuento_pension_alimenticia_fc = 0;
        $this->row_upd->monto_ahorro_voluntario = 0;

        $inputs = $this->inputs(keys_selects: $keys_selects);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener inputs',data:  $inputs, header: $header,ws:  $ws);
        }

        return $r_alta;
    }

    public function asigna_ubicacion(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }

        $registro = $this->modelo->registro(registro_id: $this->registro_id,retorno_obj: true);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener registro',data:  $registro,header: $header,ws: $ws);
        }


        $filtro['inm_comprador.id'] = $this->registro_id;

        $r_imp_rel_comprador_com_cliente = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener imp_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,header: $header,ws: $ws);
        }

        if($r_imp_rel_comprador_com_cliente->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }

        if($r_imp_rel_comprador_com_cliente->n_registros > 1){
            return $this->retorno_error(
                mensaje: 'Error de integridad existe mas de un inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }

        $imp_rel_comprador_com_cliente = $r_imp_rel_comprador_com_cliente->registros[0];

        $filtro = array();
        $filtro['com_cliente.id'] = $imp_rel_comprador_com_cliente['com_cliente_id'];

        $r_com_cliente = (new com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener com_cliente',data:  $r_com_cliente,header: $header,ws: $ws);
        }

        if($r_com_cliente->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe com_cliente',data:  $r_com_cliente,
                header: $header,ws: $ws);
        }

        if($r_com_cliente->n_registros > 1){
            return $this->retorno_error(
                mensaje: 'Error de integridad existe mas de un com_cliente',data:  $r_com_cliente,
                header: $header,ws: $ws);
        }

        $com_cliente = $r_com_cliente->registros[0];

        $this->row_upd->rfc = $com_cliente['com_cliente_rfc'];
        $this->row_upd->numero_exterior = $com_cliente['com_cliente_numero_exterior'];
        $this->row_upd->numero_interior = $com_cliente['com_cliente_numero_interior'];
        $this->row_upd->telefono = $com_cliente['com_cliente_telefono'];
        $this->row_upd->dp_pais_id = $com_cliente['dp_pais_id'];
        $this->row_upd->dp_estado_id = $com_cliente['dp_estado_id'];
        $this->row_upd->dp_municipio_id = $com_cliente['dp_municipio_id'];
        $this->row_upd->dp_cp_id = $com_cliente['dp_cp_id'];
        $this->row_upd->dp_colonia_postal_id = $com_cliente['dp_colonia_postal_id'];
        $this->row_upd->dp_calle_pertenece_id = $com_cliente['dp_calle_pertenece_id'];


        $keys_selects = array();

        $keys_selects = $this->ks_infonavit(keys_selects: $keys_selects, row_upd: $this->row_upd);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = $this->ks_dp(keys_selects: $keys_selects, row_upd: $this->row_upd);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = $this->ks_fiscales(keys_selects: $keys_selects, row_upd: new stdClass());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }


        $columns_ds = array('com_tipo_cliente_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'com_tipo_cliente_id',
            keys_selects: $keys_selects, id_selected: $com_cliente['com_tipo_cliente_id'], label: 'Tipo de Cliente',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }


        $keys_selects['com_tipo_cliente_id']->disabled = true;

        $keys_selects['nss'] = new stdClass();
        $keys_selects['nss']->disabled = true;

        $keys_selects['curp'] = new stdClass();
        $keys_selects['curp']->disabled = true;

        $keys_selects['rfc'] = new stdClass();
        $keys_selects['rfc']->disabled = true;

        $keys_selects['apellido_paterno'] = new stdClass();
        $keys_selects['apellido_paterno']->disabled = true;

        $keys_selects['apellido_materno'] = new stdClass();
        $keys_selects['apellido_materno']->disabled = true;

        $keys_selects['nombre'] = new stdClass();
        $keys_selects['nombre']->disabled = true;

        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        $in_registro_id = $this->html->hidden(name:'registro_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $in_registro_id,
                header: $header,ws:  $ws);
        }

        $inm_comprador_id = $this->html->hidden(name:'inm_comprador_id',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $inm_comprador_id,
                header: $header,ws:  $ws);
        }

        $id_retorno = $this->html->hidden(name:'id_retorno',value: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $id_retorno,
                header: $header,ws:  $ws);
        }

        $seccion_retorno = $this->html->hidden(name:'seccion_retorno',value: $this->tabla);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $seccion_retorno,
                header: $header,ws:  $ws);
        }
        $btn_action_next = $this->html->hidden(name:'btn_action_next',value: __FUNCTION__);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al in_registro_id',data:  $btn_action_next,
                header: $header,ws:  $ws);
        }

        $precio_operacion = $this->html->input_monto(cols: 12, row_upd: new stdClass(),value_vacio: false,
            name: 'precio_operacion',place_holder: 'Precio de operacion');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener precio operacion',data:  $precio_operacion,
                header: $header,ws:  $ws);
        }

        $this->inputs->id_retorno = $id_retorno;
        $this->inputs->btn_action_next = $btn_action_next;
        $this->inputs->seccion_retorno = $seccion_retorno;
        $this->inputs->registro_id = $in_registro_id;
        $this->inputs->inm_comprador_id = $inm_comprador_id;
        $this->inputs->precio_operacion = $precio_operacion;



        $columns_ds = array('inm_ubicacion_id','dp_estado_descripcion','dp_municipio_descripcion',
            'dp_cp_descripcion','dp_colonia_descripcion','dp_calle_descripcion','inm_ubicacion_numero_exterior',
            'inm_ubicacion_numero_interior','inm_ubicacion_manzana','inm_ubicacion_lote');

        $inm_ubicacion_id = (new inm_ubicacion_html(html: $this->html_base))->select_inm_ubicacion_id(
            cols: 12, con_registros: true,id_selected: -1,link:  $this->link, columns_ds: $columns_ds);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al inm_ubicacion_id',data:  $inm_ubicacion_id,
                header: $header,ws:  $ws);
        }

        $this->inputs->inm_ubicacion_id = $inm_ubicacion_id;

        $link_rel_ubi_comp_alta_bd = $this->obj_link->link_alta_bd(link: $this->link,seccion: 'inm_rel_ubi_comp');
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar link',data:  $link_rel_ubi_comp_alta_bd,
                header: $header,ws:  $ws);
        }

        $this->link_rel_ubi_comp_alta_bd = $link_rel_ubi_comp_alta_bd;


        $filtro = array();
        $filtro['inm_comprador.id'] = $this->registro_id;
        $r_inm_rel_ubi_comp = (new inm_rel_ubi_comp(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener compradores',data:  $r_inm_rel_ubi_comp,
                header: $header,ws:  $ws);
        }

        $this->imp_ubicaciones = $r_inm_rel_ubi_comp->registros;



        return $r_modifica;
    }

    protected function campos_view(): array
    {
        $keys = new stdClass();
        $keys->inputs = array('descripcion', 'es_segundo_credito', 'descuento_pension_alimenticia_dh',
            'descuento_pension_alimenticia_fc','monto_credito_solicitado_dh','monto_ahorro_voluntario','nss','curp',
            'rfc','apellido_paterno','apellido_materno','nombre','numero_exterior','numero_interior','telefono',
            'nombre_empresa_patron','nrp_nep','lada_nep','numero_nep','extension_nep','lada_com','numero_com',
            'cel_com','genero','correo_com');
        $keys->selects = array();


        $init_data = array();
        $init_data['inm_producto_infonavit'] = "gamboamartin\\inmuebles";
        $init_data['inm_attr_tipo_credito'] = "gamboamartin\\inmuebles";
        $init_data['inm_destino_credito'] = "gamboamartin\\inmuebles";
        $init_data['inm_plazo_credito_sc'] = "gamboamartin\\inmuebles";
        $init_data['inm_tipo_discapacidad'] = "gamboamartin\\inmuebles";
        $init_data['inm_persona_discapacidad'] = "gamboamartin\\inmuebles";
        $init_data['inm_estado_civil'] = "gamboamartin\\inmuebles";

        $init_data['dp_pais'] = "gamboamartin\\direccion_postal";
        $init_data['dp_estado'] = "gamboamartin\\direccion_postal";
        $init_data['dp_municipio'] = "gamboamartin\\direccion_postal";
        $init_data['dp_cp'] = "gamboamartin\\direccion_postal";
        $init_data['dp_colonia_postal'] = "gamboamartin\\direccion_postal";
        $init_data['dp_calle_pertenece'] = "gamboamartin\\direccion_postal";

        $init_data['cat_sat_regimen_fiscal'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_moneda'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_forma_pago'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_metodo_pago'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_uso_cfdi'] = "gamboamartin\\cat_sat";
        $init_data['com_tipo_cliente'] = "gamboamartin\\comercial";
        $init_data['cat_sat_tipo_persona'] = "gamboamartin\\cat_sat";

        $init_data['bn_cuenta'] = "gamboamartin\\banco";

        $campos_view = $this->campos_view_base(init_data: $init_data,keys:  $keys);

        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar campo view',data:  $campos_view);
        }


        return $campos_view;
    }

    protected function key_selects_txt(array $keys_selects): array
    {

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'es_segundo_credito', keys_selects:$keys_selects,
            place_holder: 'Es segundo Credito');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'descuento_pension_alimenticia_dh',
            keys_selects:$keys_selects, place_holder: 'Descuento Pension Alimenticia Derechohabiente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'descuento_pension_alimenticia_fc',
            keys_selects:$keys_selects, place_holder: 'Descuento Pension Alimenticia Familiar/Corresidente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'monto_credito_solicitado_dh',
            keys_selects:$keys_selects, place_holder: 'Monto Credito Solicitado Derechohabiente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'monto_ahorro_voluntario',
            keys_selects:$keys_selects, place_holder: 'Monto Ahorro Voluntario');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'nss',
            keys_selects:$keys_selects, place_holder: 'NSS');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'curp',
            keys_selects:$keys_selects, place_holder: 'CURP');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'rfc',
            keys_selects:$keys_selects, place_holder: 'RFC');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'apellido_paterno',
            keys_selects:$keys_selects, place_holder: 'Apellido Paterno');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'apellido_materno',
            keys_selects:$keys_selects, place_holder: 'Apellido Materno');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'nombre',
            keys_selects:$keys_selects, place_holder: 'Nombre(s)');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_exterior',
            keys_selects:$keys_selects, place_holder: 'Exterior');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_interior',
            keys_selects:$keys_selects, place_holder: 'Interior', required: false);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'telefono',
            keys_selects:$keys_selects, place_holder: 'Telefono');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 12,key: 'nombre_empresa_patron',
            keys_selects:$keys_selects, place_holder: 'Nombre Empresa o Patron');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'lada_nep',
            keys_selects:$keys_selects, place_holder: 'Lada');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_nep',
            keys_selects:$keys_selects, place_holder: 'Numero');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'extension_nep',
            keys_selects:$keys_selects, place_holder: 'Extension',required: false);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'nrp_nep',
            keys_selects:$keys_selects, place_holder: 'Registro Patronal');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'lada_com',
            keys_selects:$keys_selects, place_holder: 'Lada');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'numero_com',
            keys_selects:$keys_selects, place_holder: 'Numero');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'cel_com',
            keys_selects:$keys_selects, place_holder: 'Celular');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'genero',
            keys_selects:$keys_selects, place_holder: 'Genero');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'correo_com',
            keys_selects:$keys_selects, place_holder: 'Correo');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        return $keys_selects;
    }

    private function ks_dp(array $keys_selects, stdClass $row_upd): array
    {
        if(!isset($row_upd->dp_pais_id)){
            $row_upd->dp_pais_id = 151;
        }
        if(!isset($row_upd->dp_estado_id)){
            $row_upd->dp_estado_id = 14;
        }
        if(!isset($row_upd->dp_municipio_id)){
            $row_upd->dp_municipio_id = -1;
        }
        if(!isset($row_upd->dp_cp_id)){
            $row_upd->dp_cp_id = -1;
        }
        if(!isset($row_upd->dp_colonia_postal_id)){
            $row_upd->dp_colonia_postal_id = -1;
        }
        if(!isset($row_upd->dp_calle_pertenece_id)){
            $row_upd->dp_calle_pertenece_id = -1;
        }

        $columns_ds = array('dp_pais_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'dp_pais_id',
            keys_selects: $keys_selects, id_selected: $row_upd->dp_pais_id, label: 'Pais', columns_ds : $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $filtro = array();
        $filtro['dp_pais.id'] = $row_upd->dp_pais_id;

        $columns_ds = array('dp_estado_descripcion');

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  $filtro, key: 'dp_estado_id',
            keys_selects: $keys_selects, id_selected: $row_upd->dp_estado_id, label: 'Estado', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $filtro = array();
        $filtro['dp_estado.id'] = $row_upd->dp_estado_id;

        $columns_ds = array('dp_municipio_descripcion');

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  $filtro, key: 'dp_municipio_id',
            keys_selects: $keys_selects, id_selected: $row_upd->dp_municipio_id, label: 'Municipio', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('dp_cp_descripcion');

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  $filtro, key: 'dp_cp_id',
            keys_selects: $keys_selects, id_selected: $row_upd->dp_cp_id, label: 'CP', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('dp_colonia_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  $filtro, key: 'dp_colonia_postal_id',
            keys_selects: $keys_selects, id_selected: $row_upd->dp_colonia_postal_id, label: 'Colonia', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('dp_calle_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  $filtro, key: 'dp_calle_pertenece_id',
            keys_selects: $keys_selects, id_selected: $row_upd->dp_calle_pertenece_id, label: 'Calle', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }



        return $keys_selects;
    }

    private function ks_fiscales(array $keys_selects, stdClass $row_upd): array
    {

        if(!isset($row_upd->cat_sat_regimen_fiscal_id)){
            $row_upd->cat_sat_regimen_fiscal_id = 605;
        }
        if(!isset($row_upd->cat_sat_moneda_id)){
            $row_upd->cat_sat_moneda_id = 161;
        }
        if(!isset($row_upd->cat_sat_forma_pago_id)){
            $row_upd->cat_sat_forma_pago_id = 99;
        }
        if(!isset($row_upd->cat_sat_metodo_pago_id)){
            $row_upd->cat_sat_metodo_pago_id = 2;
        }
        if(!isset($row_upd->cat_sat_uso_cfdi_id)){
            $row_upd->cat_sat_uso_cfdi_id = 22;
        }
        if(!isset($row_upd->cat_sat_tipo_persona_id)){
            $row_upd->cat_sat_tipo_persona_id = 5;
        }
        if(!isset($row_upd->bn_cuenta_id)){
            $row_upd->bn_cuenta_id = -1;
        }

        $columns_ds = array('cat_sat_regimen_fiscal_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_regimen_fiscal_id',
            keys_selects: $keys_selects, id_selected: $row_upd->cat_sat_regimen_fiscal_id, label: 'Regimen Fiscal', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('cat_sat_moneda_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_moneda_id',
            keys_selects: $keys_selects, id_selected: $row_upd->cat_sat_moneda_id, label: 'Moneda', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('cat_sat_forma_pago_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_forma_pago_id',
            keys_selects: $keys_selects, id_selected: $row_upd->cat_sat_forma_pago_id, label: 'Forma de Pago', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('cat_sat_metodo_pago_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_metodo_pago_id',
            keys_selects: $keys_selects, id_selected: $row_upd->cat_sat_metodo_pago_id, label: 'Metodo de Pago', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('cat_sat_uso_cfdi_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_uso_cfdi_id',
            keys_selects: $keys_selects, id_selected: $row_upd->cat_sat_uso_cfdi_id, label: 'Uso de CFDI', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('cat_sat_tipo_persona_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_tipo_persona_id',
            keys_selects: $keys_selects, id_selected: $row_upd->cat_sat_tipo_persona_id, label: 'Tipo de Persona', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array('bn_cuenta_descripcion');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'bn_cuenta_id',
            keys_selects: $keys_selects, id_selected: $row_upd->bn_cuenta_id, label: 'Cuenta Deposito', columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        return $keys_selects;
    }

    /**
     * Integra los parametros para la generacion de inputs de tipo infonavit
     * @param array $keys_selects Configuraciones precargadas
     * @param stdClass $row_upd Registro en proceso
     * @return array
     */
    private function ks_infonavit(array $keys_selects, stdClass $row_upd): array
    {

        if(!isset($row_upd->inm_producto_infonavit_id)){
            $row_upd->inm_producto_infonavit_id = -1;
        }
        if(!isset($row_upd->inm_attr_tipo_credito_id)){
            $row_upd->inm_attr_tipo_credito_id = -1;
        }
        if(!isset($row_upd->inm_destino_credito_id)){
            $row_upd->inm_destino_credito_id = -1;
        }
        if(!isset($row_upd->inm_plazo_credito_sc_id)){
            $row_upd->inm_plazo_credito_sc_id = 7;
        }
        if(!isset($row_upd->inm_tipo_discapacidad_id)){
            $row_upd->inm_tipo_discapacidad_id = 5;
        }
        if(!isset($row_upd->inm_persona_discapacidad_id)){
            $row_upd->inm_persona_discapacidad_id = 6;
        }

        $columns_ds[] = 'inm_producto_infonavit_descripcion';
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'inm_producto_infonavit_id',
            keys_selects: $keys_selects, id_selected: $row_upd->inm_producto_infonavit_id, label: 'Producto',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $columns_ds = array();
        $columns_ds[] = 'inm_tipo_credito_descripcion';
        $columns_ds[] = 'inm_attr_tipo_credito_descripcion';
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'inm_attr_tipo_credito_id',
            keys_selects: $keys_selects, id_selected: $row_upd->inm_attr_tipo_credito_id, label: 'Tipo de Credito',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array();
        $columns_ds[] = 'inm_destino_credito_descripcion';

        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'inm_destino_credito_id',
            keys_selects: $keys_selects, id_selected: $row_upd->inm_destino_credito_id, label: 'Destino del Credito',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'inm_plazo_credito_sc_id',
            keys_selects: $keys_selects, id_selected: $row_upd->inm_plazo_credito_sc_id,
            label: 'Plazo Segundo Credito');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array();
        $columns_ds[] = 'inm_tipo_discapacidad_descripcion';
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'inm_tipo_discapacidad_id',
            keys_selects: $keys_selects, id_selected: $row_upd->inm_tipo_discapacidad_id, label: 'Tipo de Discapacidad',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $columns_ds = array();
        $columns_ds[] = 'inm_persona_discapacidad_descripcion';
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'inm_persona_discapacidad_id',
            keys_selects: $keys_selects, id_selected: $row_upd->inm_persona_discapacidad_id, label: 'Persona Discapacidad',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        return $keys_selects;
    }

    public function modifica(bool $header, bool $ws = false): array|stdClass
    {

        $r_modifica = $this->init_modifica(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al generar salida de template',data:  $r_modifica,header: $header,ws: $ws);
        }

        $filtro['inm_comprador.id'] = $this->registro_id;

        $r_imp_rel_comprador_com_cliente = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener imp_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,header: $header,ws: $ws);
        }

        if($r_imp_rel_comprador_com_cliente->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }

        if($r_imp_rel_comprador_com_cliente->n_registros > 1){
            return $this->retorno_error(
                mensaje: 'Error de integridad existe mas de un inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }

        $imp_rel_comprador_com_cliente = $r_imp_rel_comprador_com_cliente->registros[0];

        $filtro = array();
        $filtro['com_cliente.id'] = $imp_rel_comprador_com_cliente['com_cliente_id'];

        $r_com_cliente = (new com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener com_cliente',data:  $r_com_cliente,header: $header,ws: $ws);
        }

        if($r_com_cliente->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe com_cliente',data:  $r_com_cliente,
                header: $header,ws: $ws);
        }

        if($r_com_cliente->n_registros > 1){
            return $this->retorno_error(
                mensaje: 'Error de integridad existe mas de un com_cliente',data:  $r_com_cliente,
                header: $header,ws: $ws);
        }

        $com_cliente = $r_com_cliente->registros[0];

        $this->row_upd->rfc = $com_cliente['com_cliente_rfc'];
        $this->row_upd->numero_exterior = $com_cliente['com_cliente_numero_exterior'];
        $this->row_upd->numero_interior = $com_cliente['com_cliente_numero_interior'];
        $this->row_upd->telefono = $com_cliente['com_cliente_telefono'];
        $this->row_upd->dp_pais_id = $com_cliente['dp_pais_id'];
        $this->row_upd->dp_estado_id = $com_cliente['dp_estado_id'];
        $this->row_upd->dp_municipio_id = $com_cliente['dp_municipio_id'];
        $this->row_upd->dp_cp_id = $com_cliente['dp_cp_id'];
        $this->row_upd->dp_colonia_postal_id = $com_cliente['dp_colonia_postal_id'];
        $this->row_upd->dp_calle_pertenece_id = $com_cliente['dp_calle_pertenece_id'];


        $keys_selects = array();

        $keys_selects = $this->ks_infonavit(keys_selects: $keys_selects, row_upd: $this->row_upd);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = $this->ks_dp(keys_selects: $keys_selects, row_upd: $this->row_upd);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $keys_selects = $this->ks_fiscales(keys_selects: $keys_selects, row_upd: new stdClass());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }


        $columns_ds = array('com_tipo_cliente_descripcion');
        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'com_tipo_cliente_id',
            keys_selects: $keys_selects, id_selected: $com_cliente['com_tipo_cliente_id'], label: 'Tipo de Cliente',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects,
                header: $header,ws:  $ws);
        }

        $columns_ds = array('inm_estado_civil_descripcion');
        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'inm_estado_civil_id',
            keys_selects: $keys_selects, id_selected: $this->row_upd->inm_estado_civil_id, label: 'Estado Civil',
            columns_ds: $columns_ds);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }


        $base = $this->base_upd(keys_selects: $keys_selects, params: array(),params_ajustados: array());
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al integrar base',data:  $base, header: $header,ws:  $ws);
        }

        return $r_modifica;
    }

    /**
     * Inicializa los elementos mostrables para datatables
     * @return stdClass
     * @version 1.3.0
     */
    private function init_datatable(): stdClass
    {
        $columns["inm_comprador_id"]["titulo"] = "Id";
        $columns["inm_comprador_nombre"]["titulo"] = "Nombre";
        $columns["inm_comprador_apellido_paterno"]["titulo"] = "AP";
        $columns["inm_comprador_apellido_materno"]["titulo"] = "AM";
        $columns["inm_comprador_nss"]["titulo"] = "NSS";
        $columns["inm_comprador_curp"]["titulo"] = "CURP";


        $filtro = array("inm_comprador.id",'inm_comprador.nombre','inm_comprador.apellido_paterno',
            'inm_comprador.apellido_materno','inm_comprador.nss','inm_comprador.curp');

        $datatables = new stdClass();
        $datatables->columns = $columns;
        $datatables->filtro = $filtro;

        return $datatables;
    }

    public function solicitud_infonavit(bool $header, bool $ws = false){

        $inm_comprador = $this->modelo->registro(registro_id: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener comprador',data:  $inm_comprador,
                header: $header,ws:  $ws);
        }

        $filtro['inm_comprador.id'] = $this->registro_id;

        $r_imp_rel_comprador_com_cliente = (new inm_rel_comprador_com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener imp_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,header: $header,ws: $ws);
        }

        if($r_imp_rel_comprador_com_cliente->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }

        if($r_imp_rel_comprador_com_cliente->n_registros > 1){
            return $this->retorno_error(
                mensaje: 'Error de integridad existe mas de un inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }

        $imp_rel_comprador_com_cliente = $r_imp_rel_comprador_com_cliente->registros[0];

        $filtro = array();
        $filtro['com_cliente.id'] = $imp_rel_comprador_com_cliente['com_cliente_id'];

        $r_com_cliente = (new com_cliente(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener com_cliente',data:  $r_com_cliente,header: $header,ws: $ws);
        }

        if($r_com_cliente->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe com_cliente',data:  $r_com_cliente,
                header: $header,ws: $ws);
        }

        if($r_com_cliente->n_registros > 1){
            return $this->retorno_error(
                mensaje: 'Error de integridad existe mas de un com_cliente',data:  $r_com_cliente,
                header: $header,ws: $ws);
        }

        $com_cliente = $r_com_cliente->registros[0];


        $filtro = array();
        $filtro['inm_comprador.id'] = $this->registro_id;

        $r_imp_rel_ubi_comp = (new inm_rel_ubi_comp(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener r_imp_rel_ubi_comp',data:  $r_imp_rel_ubi_comp,header: $header,ws: $ws);
        }

        if($r_imp_rel_ubi_comp->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe inm_rel_comprador_com_cliente',data:  $r_imp_rel_comprador_com_cliente,
                header: $header,ws: $ws);
        }


        $imp_rel_ubi_comp = $r_imp_rel_ubi_comp->registros[0];



        $pdf = new \setasign\Fpdi\Fpdi();
        $pdf->AddPage();
        $pdf->setSourceFile($this->path_base.'templates/solicitud_infonavit.pdf');
        $tplIdx = $pdf->importPage(1);
        $pdf->useTemplate($tplIdx,null,null,null,null,true);

        $pdf->SetFont('Arial','B', 15);
        $pdf->SetTextColor(0,0,0);

        /**
         * 1. CRÉDITO SOLICITADO
         */

        $pdf->SetXY($inm_comprador['inm_producto_infonavit_x'], $inm_comprador['inm_producto_infonavit_y']);
        $pdf->Write(0, 'X');

        $pdf->SetXY($inm_comprador['inm_tipo_credito_x'], $inm_comprador['inm_tipo_credito_y']);
        $pdf->Write(0, 'X');

        $pdf->SetXY($inm_comprador['inm_attr_tipo_credito_x'], $inm_comprador['inm_attr_tipo_credito_y']);
        $pdf->Write(0, 'X');

        $pdf->SetXY($inm_comprador['inm_destino_credito_x'], $inm_comprador['inm_destino_credito_y']);
        $pdf->Write(0, 'X');

        $x_inm_comprador_es_segundo_credito = 46.5;
        $y_inm_comprador_es_segundo_credito = 91.5;
        if($inm_comprador['inm_comprador_es_segundo_credito'] === 'SI'){

            $x_inm_comprador_es_segundo_credito = 31.5;
        }

        $pdf->SetXY($x_inm_comprador_es_segundo_credito, $y_inm_comprador_es_segundo_credito);
        $pdf->Write(0, 'X');


        $pdf->SetXY($inm_comprador['inm_plazo_credito_sc_x'], $inm_comprador['inm_plazo_credito_sc_y']);
        $pdf->Write(0, 'X');


        /**
         * 2. DATOS PARA DETERMINAR EL MONTO DE CRÉDITO
         */

        $pdf->SetFont('Arial','B', 10);
        if(round($inm_comprador['inm_comprador_descuento_pension_alimenticia_dh'],2)>0.0) {

            $x_inm_comprador_descuento_pension_alimenticia_dh = 77;
            $y_inm_comprador_descuento_pension_alimenticia_dh = 117;

            $pdf->SetXY($x_inm_comprador_descuento_pension_alimenticia_dh,
                $y_inm_comprador_descuento_pension_alimenticia_dh);
            $pdf->Write(0, $inm_comprador['inm_comprador_descuento_pension_alimenticia_dh']);
        }

        if(round($inm_comprador['inm_comprador_descuento_pension_alimenticia_fc'],2)>0.0) {
            $x_inm_comprador_descuento_pension_alimenticia_fc = 115;
            $y_inm_comprador_descuento_pension_alimenticia_fc = 117;

            $pdf->SetXY($x_inm_comprador_descuento_pension_alimenticia_fc,
                $y_inm_comprador_descuento_pension_alimenticia_fc);
            $pdf->Write(0, $inm_comprador['inm_comprador_descuento_pension_alimenticia_fc']);
        }

        if(round($inm_comprador['inm_comprador_monto_credito_solicitado_dh'],2)>0.0) {
            $x_inm_comprador_monto_credito_solicitado_dh = 79;
            $y_inm_comprador_monto_credito_solicitado_dh = 131;

            $pdf->SetXY($x_inm_comprador_monto_credito_solicitado_dh,
                $y_inm_comprador_monto_credito_solicitado_dh);
            $pdf->Write(0, $inm_comprador['inm_comprador_monto_credito_solicitado_dh']);
        }

        if(round($inm_comprador['inm_comprador_monto_ahorro_voluntario'],2)>0.0) {
            $x_inm_comprador_monto_ahorro_voluntario = 51.5;
            $y_inm_comprador_monto_ahorro_voluntario = 143;

            $pdf->SetXY($x_inm_comprador_monto_ahorro_voluntario,
                $y_inm_comprador_monto_ahorro_voluntario);
            $pdf->Write(0, $inm_comprador['inm_comprador_monto_ahorro_voluntario']);
        }


        /**
         * 3. DATOS DE LA VIVIENDA/TERRENO DESTINO DEL CRÉDITO
         */



        $x_imp_rel_ubi_comp = 15.5;
        $y_imp_rel_ubi_comp = 164;

        $pdf->SetXY($x_imp_rel_ubi_comp, $y_imp_rel_ubi_comp);
            $pdf->Write(0, strtoupper($imp_rel_ubi_comp['dp_calle_ubicacion_descripcion']));


        $x_imp_rel_ubi_comp_numero_exterior = 15.5;
        $y_imp_rel_ubi_comp_numero_exterior = 170;

        $pdf->SetXY($x_imp_rel_ubi_comp_numero_exterior,
            $y_imp_rel_ubi_comp_numero_exterior);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['inm_ubicacion_numero_exterior']));


        $x_imp_rel_ubi_comp_numero_interior = 31;
        $y_imp_rel_ubi_comp_numero_interior = 170;

        $pdf->SetXY($x_imp_rel_ubi_comp_numero_interior,
            $y_imp_rel_ubi_comp_numero_interior);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['inm_ubicacion_numero_interior']));


        $x_imp_rel_ubi_comp_lote = 46;
        $y_imp_rel_ubi_comp_lote = 170;

        $pdf->SetXY($x_imp_rel_ubi_comp_lote,
            $y_imp_rel_ubi_comp_lote);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['inm_ubicacion_lote']));


        $x_imp_rel_ubi_comp_manzana = 61;
        $y_imp_rel_ubi_comp_manzana = 170;

        $pdf->SetXY($x_imp_rel_ubi_comp_manzana,
            $y_imp_rel_ubi_comp_manzana);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['inm_ubicacion_manzana']));



        $x_imp_rel_ubi_colonia_descripcion = 81;
        $y_imp_rel_ubi_colonia_descripcion = 170;

        $pdf->SetXY($x_imp_rel_ubi_colonia_descripcion, $y_imp_rel_ubi_colonia_descripcion);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['dp_colonia_ubicacion_descripcion']));


        $x_imp_rel_ubi_estado_descripcion = 15.5;
        $y_imp_rel_ubi_estado_descripcion = 176;

        $pdf->SetXY($x_imp_rel_ubi_estado_descripcion, $y_imp_rel_ubi_estado_descripcion);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['dp_estado_ubicacion_descripcion']));


        $x_imp_rel_ubi_municipio_descripcion = 100;
        $y_imp_rel_ubi_municipio_descripcion = 176;

        $pdf->SetXY($x_imp_rel_ubi_municipio_descripcion, $y_imp_rel_ubi_municipio_descripcion);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['dp_municipio_ubicacion_descripcion']));


        $x_imp_rel_ubi_cp_descripcion = 173;
        $y_imp_rel_ubi_cp_descripcion = 176;

        $pdf->SetXY($x_imp_rel_ubi_cp_descripcion, $y_imp_rel_ubi_cp_descripcion);
        $pdf->Write(0, strtoupper($imp_rel_ubi_comp['dp_cp_ubicacion_descripcion']));


        $x_con_discapacidad = 94.5;
        $y_con_discapacidad = 190;

        if($inm_comprador['inm_comprador_con_discapacidad'] === 'SI'){

            $x_con_discapacidad = 84;
        }

        $pdf->SetXY($x_con_discapacidad, $y_con_discapacidad);
        $pdf->Write(0, 'X');


        $pdf->SetXY($inm_comprador['inm_tipo_discapacidad_x'], $inm_comprador['inm_tipo_discapacidad_y']);
        $pdf->Write(0, 'X');

        $pdf->SetXY($inm_comprador['inm_persona_discapacidad_x'], $inm_comprador['inm_persona_discapacidad_y']);
        $pdf->Write(0, 'X');


        $x_imp_rel_ubi_precio_operacion = 21.5;
        $y_imp_rel_ubi_precio_operacion = 224.5;


        if((int)$inm_comprador['inm_destino_credito_id'] === 3 ){
            $x_imp_rel_ubi_precio_operacion = 67;

        }
        if((int)$inm_comprador['inm_destino_credito_id'] === 4 ){
            $x_imp_rel_ubi_precio_operacion = 114;

        }
        if((int)$inm_comprador['inm_destino_credito_id'] === 5 ){
            $x_imp_rel_ubi_precio_operacion = 163;

        }

        $pdf->SetXY($x_imp_rel_ubi_precio_operacion, $y_imp_rel_ubi_precio_operacion);
        $pdf->Write(0, $imp_rel_ubi_comp['inm_rel_ubi_comp_precio_operacion']);




        /**
         * 4. DATOS DE LA EMPRESA O PATRÓN
         */

        if(!isset($inm_comprador['inm_comprador_nombre_empresa_patron'])){
            $inm_comprador['inm_comprador_nombre_empresa_patron'] = '';
        }

        $x_nombre_empresa_patron = 16;
        $y_nombre_empresa_patron = 249;
        $pdf->SetXY($x_nombre_empresa_patron, $y_nombre_empresa_patron);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_nombre_empresa_patron']));


        if(!isset($inm_comprador['inm_comprador_nrp_nep'])){
            $inm_comprador['inm_comprador_nrp_nep'] = '';
        }

        $x_nrp = 140;
        $y_nrp = 249;
        $pdf->SetXY($x_nrp, $y_nrp);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_nrp_nep']));


        if(!isset($inm_comprador['inm_comprador_lada_nep'])){
            $inm_comprador['inm_comprador_lada_nep'] = '';
        }

        $x_lada_nep = 57;
        $y_lada_nep = 256;
        $pdf->SetXY($x_lada_nep, $y_lada_nep);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_lada_nep']));


        if(!isset($inm_comprador['inm_comprador_numero_nep'])){
            $inm_comprador['inm_comprador_numero_nep'] = '';
        }

        $x_num_nep = 70;
        $y_num_nep = 256;
        $pdf->SetXY($x_num_nep, $y_num_nep);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_numero_nep']));

        if(is_null($inm_comprador['inm_comprador_extension_nep'])){
            $inm_comprador['inm_comprador_extension_nep'] = '';
        }
        $x_ext_nep = 110;
        $y_ext_nep = 256;
        $pdf->SetXY($x_ext_nep, $y_ext_nep);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_extension_nep']));


        $pdf->AddPage();
        $tplIdx = $pdf->importPage(2);
        $pdf->useTemplate($tplIdx,null,null,null,null,true);

        /**
         * 5. DATOS DE IDENTIFICACIÓN DEL (DE LA) DERECHOHABIENTE / DATOS QUE SERÁN VALIDADOS
         */

        $x_nss = 16;
        $y_nss = 30;
        $pdf->SetXY($x_nss, $y_nss);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_nss']));

        $x_curp = 67;
        $y_curp = 30;
        $pdf->SetXY($x_curp, $y_curp);
        $pdf->Write(0,strtoupper( $inm_comprador['inm_comprador_curp']));

        $x_rfc = 132;
        $y_rfc = 30;
        $pdf->SetXY($x_rfc, $y_rfc);
        $pdf->Write(0, strtoupper($com_cliente['com_cliente_rfc']));


        $x_ap = 16;
        $y_ap = 37;
        $pdf->SetXY($x_ap, $y_ap);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_apellido_paterno']));

        $x_am = 106;
        $y_am = 37;
        $pdf->SetXY($x_am, $y_am);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_apellido_materno']));

        $x_nombre = 16;
        $y_nombre = 44;
        $pdf->SetXY($x_nombre, $y_nombre);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_nombre']));

        $domicilio = $com_cliente['dp_calle_descripcion'].' '.$com_cliente['com_cliente_numero_exterior'];
        $domicilio .= $com_cliente['com_cliente_numero_interior'];

        $x_rfc = 16;
        $y_rfc = 54;
        $pdf->SetXY($x_rfc, $y_rfc);
        $pdf->Write(0, strtoupper($domicilio));


        $x_colonia = 16;
        $y_colonia = 61;
        $pdf->SetXY($x_colonia, $y_colonia);
        $pdf->Write(0, strtoupper($com_cliente['dp_colonia_descripcion']));

        $x_estado = 105;
        $y_estado = 61;
        $pdf->SetXY($x_estado, $y_estado);
        $pdf->Write(0, strtoupper($com_cliente['dp_estado_descripcion']));

        $x_municipio = 16;
        $y_municipio = 68;
        $pdf->SetXY($x_municipio, $y_municipio);
        $pdf->Write(0, strtoupper($com_cliente['dp_municipio_descripcion']));

        $x_cp = 82;
        $y_cp = 68;
        $pdf->SetXY($x_cp, $y_cp);
        $pdf->Write(0, strtoupper($com_cliente['dp_cp_descripcion']));


        $x_lada = 27;
        $y_lada = 76;
        $pdf->SetXY($x_lada, $y_lada);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_lada_com']));

        $x_numero = 40;
        $y_numero = 76;
        $pdf->SetXY($x_numero, $y_numero);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_numero_com']));

        $x_cel = 88;
        $y_cel = 76;
        $pdf->SetXY($x_cel, $y_cel);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_cel_com']));

        $x_genero = 144.5;
        $y_genero = 77;

        if($inm_comprador['inm_comprador_genero'] === 'F'){

            $x_genero = 150.5;
        }

        $pdf->SetXY($x_genero, $y_genero);
        $pdf->Write(0, 'X');


        $x_correo = 37.5;
        $y_correo = 85.5;
        $pdf->SetXY($x_correo, $y_correo);
        $pdf->Write(0, strtoupper($inm_comprador['inm_comprador_correo_com']));


        $pdf->SetXY($inm_comprador['inm_estado_civil_x'], $inm_comprador['inm_estado_civil_y']);
        $pdf->Write(0, 'X');

        if((int)$inm_comprador['inm_estado_civil_id'] !==1){
            $pdf->SetXY(58.5, 90);
            $pdf->Write(0, 'X');
        }


        $filtro = array();
        $filtro['inm_comprador.id'] = $this->registro_id;

        $r_imp_rel_co_acred = (new inm_rel_co_acred(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener r_imp_rel_co_acred',data:  $r_imp_rel_co_acred,header: $header,ws: $ws);
        }

        if($r_imp_rel_co_acred->n_registros === 1){

            $imp_rel_co_acred = $r_imp_rel_co_acred->registros[0];

            $inm_co_acreditado = (new inm_co_acreditado(link: $this->link))->registro(registro_id: $imp_rel_co_acred['inm_co_acreditado_id']);
            if(errores::$error){
                return $this->retorno_error(
                    mensaje: 'Error al obtener inm_co_acreditado',data:  $inm_co_acreditado,header: $header,ws: $ws);
            }


            $x = 16;
            $y = 105;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_nss']));


            $x = 64;
            $y = 105;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_curp']));

            $x = 132;
            $y = 105;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_rfc']));


            $x = 16;
            $y = 112;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_apellido_paterno']));

            $x = 107;
            $y = 112;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_apellido_materno']));

            $x = 16;
            $y = 119;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_nombre']));


            $x = 27;
            $y = 129;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_lada']));

            $x = 40;
            $y = 129;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_numero']));


            $x = 86;
            $y = 129;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_celular']));


            $x = 144;
            $y = 130;

            if($inm_co_acreditado['inm_co_acreditado_genero'] === 'F'){

                $x = 150.5;
            }

            $pdf->SetXY($x, $y);
            $pdf->Write(0, 'X');


            $x = 38;
            $y = 138;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_correo']));


            $x = 16;
            $y = 152;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_nombre_empresa_patron']));


            $x = 140;
            $y = 152;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_nrp']));

            $x = 100;
            $y = 158;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_lada_nep']));

            $x = 113;
            $y = 158;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_numero_nep']));

            $x = 150;
            $y = 158;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_co_acreditado['inm_co_acreditado_extension_nep']));



        }

        $filtro = array();
        $filtro['inm_comprador.id'] = $this->registro_id;

        $r_inm_referencia = (new inm_referencia(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener r_inm_referencia',data:  $r_inm_referencia,header: $header,ws: $ws);
        }


        if($r_inm_referencia->n_registros > 0) {
            $inm_referencia = $r_inm_referencia->registros[0];


            $x = 16;
            $y = 177;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_apellido_paterno']));

            $x = 16;
            $y = 183.5;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_apellido_materno']));

            $x = 16;
            $y = 191;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_nombre']));

            $x = 27;
            $y = 199.5;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_lada']));

            $x = 40;
            $y = 199.5;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_numero']));

            $x = 27;
            $y = 206;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_celular']));


            $x = 16;
            $y = 212;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['dp_calle_descripcion']));

            $x = 16;
            $y = 217;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_numero_dom']));

            $x = 16;
            $y = 226;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['dp_colonia_descripcion']));

            $x = 16;
            $y = 234;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['dp_estado_descripcion']));

            $x = 16;
            $y = 244;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['dp_municipio_descripcion']));


            $x = 82;
            $y = 244;
            $pdf->SetXY($x, $y);
            $pdf->Write(0, strtoupper($inm_referencia['dp_cp_descripcion']));


            if(isset($r_inm_referencia->registros[1])){
                $inm_referencia = $r_inm_referencia->registros[1];


                $x = 110;
                $y = 177;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_apellido_paterno']));

                $x = 110;
                $y = 183.5;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_apellido_materno']));

                $x = 110;
                $y = 191;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_nombre']));

                $x = 121;
                $y = 199.5;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_lada']));

                $x = 134;
                $y = 199.5;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_numero']));

                $x = 121;
                $y = 206;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_celular']));


                $x = 110;
                $y = 212;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['dp_calle_descripcion']));

                $x = 110;
                $y = 218;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['inm_referencia_numero_dom']));

                $x = 110;
                $y = 225;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['dp_colonia_descripcion']));

                $x = 110;
                $y = 237;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['dp_estado_descripcion']));

                $x = 110;
                $y = 245;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper(utf8_decode($inm_referencia['dp_municipio_descripcion'])));


                $x = 178;
                $y = 245;
                $pdf->SetXY($x, $y);
                $pdf->Write(0, strtoupper($inm_referencia['dp_cp_descripcion']));


            }


        }

        $pdf->AddPage();
        $tplIdx = $pdf->importPage(3);
        $pdf->useTemplate($tplIdx,null,null,null,null,true);

        $filtro = array();
        $filtro['org_empresa.id'] = $inm_comprador['org_empresa_id'];

        $r_inm_conf_empresa = (new inm_conf_empresa(link: $this->link))->filtro_and(filtro:$filtro);
        if(errores::$error){
            return $this->retorno_error(
                mensaje: 'Error al obtener r_inm_conf_empresa',data:  $r_inm_conf_empresa,header: $header,ws: $ws);
        }

        if($r_inm_conf_empresa->n_registros === 0){
            return $this->retorno_error(
                mensaje: 'Error no existe r_inm_conf_empresa',data:  $r_inm_conf_empresa,
                header: $header,ws: $ws);
        }

        $inm_conf_empresa = $r_inm_conf_empresa->registros[0];


        $pdf->SetXY($inm_conf_empresa['inm_tipo_inmobiliaria_x'], $inm_conf_empresa['inm_tipo_inmobiliaria_y']);
        $pdf->Write(0, 'X');


        $x = 16;
        $y = 37;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, strtoupper($inm_comprador['org_empresa_razon_social']));


        $x = 22;
        $y = 57;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, strtoupper($inm_comprador['org_empresa_rfc']));


        $x = 16;
        $y = 62;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, strtoupper($inm_comprador['org_empresa_razon_social']));


        $x = 16;
        $y = 85;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, strtoupper($inm_comprador['bn_cuenta_descripcion']));

        $x = 16;
        $y = 85;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, strtoupper($inm_comprador['bn_cuenta_descripcion']));


        $ciudad = strtoupper($inm_comprador['dp_municipio_empresa_descripcion']);
        $ciudad .= ", ".strtoupper($inm_comprador['dp_estado_empresa_descripcion']);


        $x = 36;
        $y = 240;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, strtoupper($ciudad));

        $x = 119;
        $y = 240;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, ((int)date('d')));

        //print_r($this->modelo->mes['espaniol'][date('m')]['nombre']);exit;

        $mes_letra = $this->modelo->mes['espaniol'][date('m')]['nombre'];

        $x = 128;
        $y = 240;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, $mes_letra);


        $year = $this->modelo->year['espaniol'][date('Y')]['abreviado'];

        $x = 178;
        $y = 240;
        $pdf->SetXY($x, $y);
        $pdf->Write(0, $year);


        $pdf->Output('tu_pedorrote.pdf', 'I');

        exit;
    }


}
